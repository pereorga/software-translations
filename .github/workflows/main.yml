name: Update translations
on:
  schedule:
    - cron: '0 8 * * 1'
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y csvkit dos2unix nodejs npm translate-toolkit unzip
      - name: Configure Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "Automated GitHub Action"
          git config --global advice.addIgnoredFile false
      - name: Run generate.sh in each directory and commit changes
        run: |
          error_occurred=0
          for d in */; do
            if [ -f "${d}generate.sh" ]; then
              echo "Running generate.sh in $d"
              if "${d}generate.sh"; then
                git add --ignore-errors "$d"

                # Check if changes exist and are not just deletions of all files
                if git diff --cached --unified=0 "$d" | grep "^-\|^\+" | grep -v "^---" | grep -v "^+++" | grep -v "POT-Creation-Date: " | grep -v "X-Generator: "; then
                  # Check if all changes are deletions (all files deleted)
                  deletions=$(git diff --cached --name-status "$d" | grep "^D" | wc -l)
                  total_changes=$(git diff --cached --name-status "$d" | wc -l)

                  if [ "$deletions" -gt 0 ] && [ "$deletions" -eq "$total_changes" ]; then
                    echo "ERROR: All files in $d would be deleted - skipping commit and push"
                    git restore --staged "$d"
                    error_occurred=1
                  else
                    git commit -m "$d: update via GitHub Actions"
                    git push origin HEAD
                  fi
                else
                  echo "No significant changes in $d"
                  git restore --staged "$d"
                fi
              else
                if [[ -f "${d}.allowed_to_fail" ]]; then
                  echo "Error occurred in $d (allowed to fail)"
                else
                  echo "$d: an error occurred"
                  error_occurred=1
                fi
              fi
              git checkout "$d"
              git clean -fd
            fi
          done

          # Make the pipeline fail if there was an error
          if [ "$error_occurred" -eq "1" ]; then
            exit 1
          fi
